import React, { useContext, useEffect, useState } from "react";
import { Box, Paper, Typography, Grid, CircularProgress, Button } from "@mui/material";
import { useNavigate } from "react-router-dom";
import { UserContext } from "../context/userContext";
import plan1Img from "../assets/Bronzes.png";
import plan2Img from "../assets/Golds.png";
import plan3Img from "../assets/Diamonds.png";
import FetalGrowthChart from "../component/FetalGrowthchart";

const Maindashboard = () => {
    const { firstName, lastName, userEmail, userToken } = useContext(UserContext);
    const [plans, setPlans] = useState([]);
    const [userSubscription, setUserSubscription] = useState(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const currentSubscription = userSubscription?.[0];
    const navigate = useNavigate();

    const fetchSubscriptionPlans = async () => {
        try {
            console.log("üì° Fetching subscription plans...");
            const response = await fetch("http://localhost:5001/api/subscription/all");

            if (!response.ok) {
                throw new Error("Kh√¥ng th·ªÉ l·∫•y danh s√°ch g√≥i ƒëƒÉng k√Ω");
            }

            const data = await response.json();
            console.log("‚úÖ Subscription Plans:", data);
            setPlans(data);
        } catch (error) {
            console.error("üö® Error fetching subscription plans:", error);
            setError("Kh√¥ng th·ªÉ t·∫£i th√¥ng tin g√≥i ƒëƒÉng k√Ω. Vui l√≤ng th·ª≠ l·∫°i sau.");
        }
    };

    useEffect(() => {
        const fetchUserSubscription = async (token) => {
            try {
                console.log("üöÄ Fetching user subscription...");
                console.log("üîë Token g·ª≠i l√™n:", token);

                const response = await fetch(`http://localhost:5001/api/subscription/user/${userEmail}`, {
                    method: "GET",
                    headers: {
                        "Authorization": `Bearer ${token}`,
                    },
                });

                console.log("üì° API Response Status:", response.status);

                if (!response.ok) {
                    console.error("‚ùå L·ªói khi l·∫•y subscription:", response.statusText);
                    return null;
                }

                const data = await response.json();
                console.log("‚úÖ API tr·∫£ v·ªÅ:", data);
                return data;
            } catch (error) {
                console.error("üö® Fetch error:", error);
                return null;
            }
        };

        const storedToken = localStorage.getItem("userToken");
        console.log("üîÑ Checking UserContext values...");
        console.log("User Email:", userEmail);
        console.log("User Token (from Context):", userToken);
        console.log("LocalStorage Token:", storedToken);

        // N·∫øu context ch∆∞a c√≥ token, nh∆∞ng localStorage c√≥ ‚Üí C·∫≠p nh·∫≠t context

        if (!userEmail || (!userToken && !storedToken)) {
            console.log("‚èπÔ∏è Kh√¥ng c√≥ userEmail ho·∫∑c Token, d·ª´ng API");
            return;
        }

        const fetchData = async () => {
            setLoading(true);
            try {
                const [plansData, userSubData] = await Promise.all([
                    fetchSubscriptionPlans(),
                    fetchUserSubscription(userToken || storedToken),
                ]);

                if (plansData) setPlans(plansData);
                if (userSubData) {
                    console.log("üì¢ C·∫≠p nh·∫≠t state userSubscription tr∆∞·ªõc khi set:", userSubData);
                    setUserSubscription(userSubData);
                    console.log("üì¢ userSubscription sau khi set:", userSubscription); // ƒê√¢y c√≥ th·ªÉ v·∫´n l√† gi√° tr·ªã c≈© do React c·∫≠p nh·∫≠t async
                }
            } catch (error) {
                console.error("üö® Error fetching data:", error);
            } finally {
                setLoading(false);
            }
        };

        fetchData();
    }, [userEmail, userToken]);

    // üìå Theo d√µi khi `userSubscription` thay ƒë·ªïi
    useEffect(() => {
        console.log("üì¢ User subscription updated:", userSubscription);
    }, [userSubscription]);

    const handleSubscribe = (plan) => {
        navigate(`/checkout/${plan.planId}`, { state: { plan } });
    };

    const fullName = firstName && lastName ? `${firstName} ${lastName}`.trim() : "User";

    const planImages = {
        4: plan1Img,
        5: plan2Img,
        6: plan3Img
    };
    console.log("Re-render UI! userSubscription:", userSubscription);

    return (
        <Box sx={{ padding: 3 }}>
            {/* Ch√†o m·ª´ng user */}
            <Typography variant="h4" sx={{ marginBottom: 2 }}>
                Welcome, {fullName}!
            </Typography>

            {/* Hi·ªÉn th·ªã th√¥ng tin g√≥i ƒë√£ ƒëƒÉng k√Ω ngay d∆∞·ªõi ph·∫ßn Welcome */}
            {currentSubscription && currentSubscription.isSubscribed ? (
                <Box sx={{ padding: 2, backgroundColor: "#f9f9f9", borderRadius: 2, marginBottom: 3 }}>
                    <Typography variant="h6" sx={{ fontWeight: "bold", color: "#F48FB1" }}>
                        G√≥i h·ªôi vi√™n ƒë√£ ƒëƒÉng k√Ω: {currentSubscription.name}
                    </Typography>
                    <Typography variant="body1">
                        Ng√†y ƒëƒÉng k√Ω:{" "}
                        {(() => {
                            let expiryDate = new Date(currentSubscription.subscriptionExpiry);
                            let startDate = new Date(expiryDate);
                            startDate.setDate(expiryDate.getDate() - currentSubscription.duration);
                            return startDate.toLocaleDateString();
                        })()}
                    </Typography>
                    <Typography variant="body1">
                        Ng√†y k·∫øt th√∫c: {new Date(currentSubscription.subscriptionExpiry).toLocaleDateString()}
                    </Typography>
                    <Typography variant="body1">
                        S·ªë ng√†y c√≤n l·∫°i:{" "}
                        {Math.max(
                            Math.ceil(
                                (new Date(currentSubscription.subscriptionExpiry) - new Date()) / (1000 * 60 * 60 * 24)
                            ),
                            0
                        )}{" "}
                        ng√†y
                    </Typography>
                </Box>
            ) : (
                <Typography variant="h6" sx={{ color: "#ff6347", marginBottom: 3 }}>
                    B·∫°n ch∆∞a ƒëƒÉng k√Ω g√≥i n√†o. Vui l√≤ng ch·ªçn g√≥i ph√π h·ª£p ƒë·ªÉ ƒëƒÉng k√Ω!
                </Typography>
            )}

            {/* Bi·ªÉu ƒë·ªì tƒÉng tr∆∞·ªüng thai nhi */}
            <Box sx={{ marginTop: 3 }}>
                <Typography variant="h5" sx={{ marginBottom: 2 }}>Bi·ªÉu ƒë·ªì tƒÉng tr∆∞·ªüng thai nhi</Typography>
                <FetalGrowthChart />
            </Box>

            {/* G√≥i ƒëƒÉng k√Ω */}
            <Box sx={{ marginTop: 4 }}>
                <Typography variant="h5" sx={{ marginBottom: 2 }}>G√≥i ƒëƒÉng k√Ω c·ªßa ch√∫ng t√¥i</Typography>

                {loading ? (
                    <Box sx={{ display: "flex", width: "100%", justifyContent: "center", p: 3 }}>
                        <CircularProgress />
                    </Box>
                ) : (
                    <Grid container spacing={3}>
                        {plans.map((plan) => {
                            const isSubscribed = currentSubscription?.planId === plan.planId;

                            return (
                                <Grid item xs={12} md={4} key={plan.planId}>
                                    <Paper
                                        elevation={3}
                                        sx={{
                                            padding: 2,
                                            textAlign: "center",
                                            display: "flex",
                                            flexDirection: "column",
                                            justifyContent: "space-between",
                                            minHeight: "550px",
                                            borderRadius: 2,
                                            transition: "transform 0.2s, box-shadow 0.2s",
                                            "&:hover": {
                                                transform: "translateY(-5px)",
                                                boxShadow: 6
                                            },
                                            border: isSubscribed ? "2px solid #F48FB1" : "none"
                                        }}
                                    >
                                        <Box>
                                            <img
                                                src={planImages[plan.planId] || plan1Img}
                                                alt={plan.name}
                                                style={{
                                                    width: "100%",
                                                    height: "auto",
                                                    maxHeight: "250px",
                                                    objectFit: "contain",
                                                    borderRadius: "8px",
                                                    marginBottom: "15px"
                                                }}
                                            />
                                            <Typography
                                                variant="h5"
                                                sx={{
                                                    fontWeight: "bold",
                                                    color: "#F48FB1",
                                                    marginBottom: 1
                                                }}
                                            >
                                                {plan.name}
                                            </Typography>

                                            <Typography
                                                variant="h6"
                                                sx={{
                                                    marginBottom: 2,
                                                    color: "#333"
                                                }}
                                            >
                                                ${plan.price}
                                            </Typography>

                                            <Typography
                                                variant="body1"
                                                sx={{
                                                    marginBottom: 2,
                                                    color: "#666",
                                                    minHeight: "80px"
                                                }}
                                            >
                                                {plan.description || "G√≥i ƒëƒÉng k√Ω cao c·∫•p v·ªõi nhi·ªÅu t√≠nh nƒÉng ƒë·∫∑c bi·ªát."}
                                            </Typography>

                                            <Typography variant="body2" sx={{ marginBottom: 1, color: "#555" }}>
                                                Th·ªùi h·∫°n: {plan.duration || 30} ng√†y
                                            </Typography>
                                        </Box>

                                        <Button
                                            variant="contained"
                                            color={isSubscribed ? "secondary" : "primary"}
                                            fullWidth
                                            sx={{
                                                marginTop: 2,
                                                opacity: isSubscribed ? 0.8 : 1,
                                                backgroundColor: isSubscribed ? "#9C27B0" : "#F48FB1",
                                                "&:hover": {
                                                    backgroundColor: isSubscribed ? "#7B1FA2" : "#F06292",
                                                }
                                            }}
                                            onClick={() => !isSubscribed && handleSubscribe(plan)}
                                            disabled={isSubscribed}
                                        >
                                            {isSubscribed ? "ƒê√£ ƒëƒÉng k√Ω" : `ƒêƒÉng k√Ω ngay - $${plan.price}`}
                                        </Button>
                                    </Paper>
                                </Grid>
                            );
                        })}
                    </Grid>
                )}
            </Box>
        </Box>
    );
};

export default Maindashboard;
